#**************************************************************************************
#                                                                                      
# McAERsim-Framework: Network traffic within McAERsim generated by NEST
# Copyright (C) 2022-2023 Forschungszentrum Juelich GmbH, ZEA-2                        
# Author: Markus Robens <https://www.fz-juelich.de/profile/robens_m>                   
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#************************************************************************************
#
# This is an auxiliary file that augments the functions in helpers.py of the
# NEST cortical microcircuit model by functions to produce a YAML file with
# connectivity information that can be converted to a global routing table
# by RTparser.
#
#************************************************************************************

import nest
import yaml
from collections import defaultdict
import os

def __get_target_neurons(pop):
    """Creates a dictionary that uses source neuron IDs as keys and lists
       of target neuron IDs as values

       Parameters
       ----------
       pop
           NEST NodeCollection representing a population
       
       Returns
       -------
       target_neurons
           Dictionary containing source neuron IDs as keys and lists of
           target neuron IDs as values
    """
    target_neurons = defaultdict(list)
    conns = nest.GetConnections(pop)
    src_trgt_nrns = zip(conns.get('source'), conns.get('target'))
    for x,y in src_trgt_nrns:
        target_neurons[x].append(y)
    return dict(target_neurons)

def export_connections(path, export_fname, pops):
    """Generates a dictionary with population IDs as keys and nested
       dictionaries as values. The nested dictinaries are created by
       the internal function __get_target_neurons(pop)
    
       Parameters
       ----------
       path
           Path where the output files are stored
       export_fname
           Name of the YAML output file
       pops
           List of NEST NodeCollections representing neuron populations
    """
    fn = os.path.join(path, export_fname)
    o_conn_dict = {}
    for i,pop in enumerate(pops):
        o_conn_dict[i] = __get_target_neurons(pop)
    with open(fn, 'wt') as f:
        yaml.dump(o_conn_dict, f)
