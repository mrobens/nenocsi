#####################################################################################
# Noxim - the NoC Simulator
#
# Copyright (C) 2005-2018 by the University of Catania
# For the complete list of authors refer to file ./AUTHORS.txt
# For the license applied to these sources refer to file ./LICENSE.txt
#
#************************************************************************************
# Downloaded March 23, 2022 from
# https://github.com/davidepatti/noxim/tree/c52ebce2217e57bcd4ff11a97b400323bd00acd5
#************************************************************************************
#
# NENoCSi: Patched version of Noxim to process traffic generated by NEST
# Modifications Copyright (C) 2023 Forschungszentrum Juelich GmbH, ZEA-2
# Author: Markus Robens <https://www.fz-juelich.de/profile/robens_m>
# For the license applied to these modifications and NENoCSi as a whole
# refer to file ./LICENSE_NENOCSI.txt
#
# 2023-02-02: Additions have been made to address settings for NEST defined traffic
#             as well as different casting types and the torus topology. The output
#             caused by the option -help was updated. Also, some editorial changes,
#             revisions, necessary adaptations and additions have been performed.
#             Some parts have also been re-written.
#
#####################################################################################

User Manual
===========

This short guide will explain some of the most commonly used parameters and
options that can be passed to NENoCSi on the command line.

The synopsis of the command is:

    nenocsi [ options ]

where "options" are potential command-line options. The NENoCSi simulator basically
launches a NoC simulation. You can execute the command to access the list of options:

    ./nenocsi -help

The output provided by this command should look like this:

=====================================================================================

        SystemC 2.3.3-Accellera --- Mar 22 2020 15:59:11
        Copyright (c) 1996-2018 by all Contributors,
        ALL RIGHTS RESERVED
	---------------------------------------------------------
		Noxim - the NoC Simulator
		(C) University of Catania
	---------------------------------------------------------
  Catania V., Mineo A., Monteleone S., Palesi M., and Patti D.
  (2016) Cycle-Accurate Network on Chip Simulation with Noxim.
  ACM Trans. Model. Comput. Simul. 27, 1, Article 4 (August 2016),
  25 pages. DOI: https://doi.org/10.1145/2953878

 -----------------------------------------------------------------------
 NENoCSi - Patched version to process traffic generated by NEST
 Modifications Copyright 2022-2023 Forschungszentrum Juelich GmbH, ZEA-2

 This program is provided AS IS and comes with ABSOLUTELY NO WARRANTY.
 It is free software, and you are welcome to redistribute it under
 certain conditions. See the LICENSE_NENOCSI.txt file for details.
 -----------------------------------------------------------------------

Usage: ./nenocsi [options]
Where [options] is one or more of the following ones:
	-help			Show this help and exit
	-config			Load the specified configuration file
	-power			Load the specified power configurations file
	-nest_inp_file FILENAME	Load the specified NEST trace file
	-nest_t_mul F		Multiplier used to convert NEST time stamps
	-verbose S		Verbosity level of logging (if active) and global parameter display
		VERBOSE_OFF	Normal logging and aggregated statistical results
		VERBOSE_MEDIUM	Adds global parameter display and destination logging for wired connections
		VERBOSE_HIGH	Adds extended flit details while logging
	-trace FILENAME		Trace signals to a VCD file named 'FILENAME.vcd'
	-dimx N			Set the mesh X dimension
	-dimy N			Set the mesh Y dimension
	-buffer N		Set the depth of router input buffers [flits]
	-buffer_tt N		Set the depth of hub buffers to tile [flits]
	-buffer_ft N		Set the depth of hub buffers from tile [flits]
	-buffer_antenna N	Set the depth of hub antenna buffers (RX/TX) [flits]
	-vc N			Number of virtual channels
	-winoc			Enable radio hub wireless transmission
	-winoc_dst_hops		Max number of hops between target RadioHub and destination node
	-wirxsleep		Enable radio hub wireless power manager
	-size Nmin Nmax		Set the minimum and maximum packet size [flits]
	-flit N			Set the flit size [bit]
	-topology TYPE		Set the topology to one of the following:
		MESH		2D Mesh
		TORUS		2D Torus Mesh - requires XY_TORUS routing and excludes NoP selection strategy
		BUTTERFLY	Delta network Butterfly (radix 2)
		BASELINE	Delta network Baseline
		OMEGA		Delta network Omega
	-routing TYPE		Set the routing algorithm to one of the following:
		XY		XY routing algorithm
		XY_TORUS	XY routing algorithm for torus network
		WEST_FIRST	West-First routing algorithm
		NORTH_LAST	North-Last routing algorithm
		NEGATIVE_FIRST	Negative-First routing algorithm
		ODD_EVEN	Odd-Even routing algorithm
		DYAD T		DyAD routing algorithm with threshold T
		TABLE_BASED FILENAME	Routing Table Based routing algorithm with table in the specified file
	-sel TYPE		Set the selection strategy to one of the following:
		RANDOM		Random selection strategy
		BUFFER_LEVEL	Buffer-Level Based selection strategy
		NOP		Neighbors-on-Path selection strategy
	-pir R TYPE		Set the packet injection rate R [0..1] and the time distribution TYPE where TYPE is one of the following:
		poisson		Memory-less Poisson distribution
		burst R		Burst distribution with given real burstness
		pareto on off r	Self-similar Pareto distribution with given real parameters (alfa-on alfa-off r)
		custom R	Custom distribution with given real probability of retransmission
	-traffic TYPE		Set the spatial distribution of traffic to TYPE where TYPE is one of the following:
		random		Random traffic distribution
		local L		Random traffic with a fraction L (0..1) of packets having a destination connected to the local hub, i.e. not using wireless
		ulocal		Random traffic with locality smooth distribution
		transpose1	Transpose matrix 1 traffic distribution
		transpose2	Transpose matrix 2 traffic distribution
		bitreversal	Bit-reversal traffic distribution
		butterfly	Butterfly traffic distribution
		shuffle		Shuffle traffic distribution
		table FILENAME	Traffic Table Based traffic distribution with table in the specified file
				NOTE: If -nest_inp_file is provided, the spacial traffic distribution is automatically set to TRAFFIC_NEST_TRACE
	-casting_type TYPE	Set the casting type TYPE where TYPE is one of the following (only for NEST-based traffic):
		UC		Unicast
		LMC		Local Multicast
	-hs ID P		Add node ID to hotspot nodes, with percentage P (0..1) (Only for 'random' traffic)
	-warmup N		Start to collect statistics after N cycles
	-seed N			Set the seed of the random generator (default time())
	-detailed		Show detailed statistics
	-show_buf_stats		Show buffers statistics
	-volume N		Stop the simulation when either the maximum number of cycles has been reached or N flits have
				been delivered
	-asciimonitor		Show status of the network while running (experimental)
	-sim N			Run for the specified simulation time [cycles]
	-ofile_suffix FILENAME	Use the given suffix for the creation of output files

If you find this program useful please don't forget to mention in your paper Maurizio Palesi <maurizio.palesi@unikore.it>
If you find this program useless please feel free to complain with Davide Patti <davide.patti@dieei.unict.it>
If you want to send money please feel free to PayPal to Fabrizio Fazzino <fabrizio@fazzino.it>
and if need to solve any other problem of your life please contact Turi Monteleone <salvatore.monteleone@dieei.unict.it>

=====================================================================================

Now we'll take a closer look at each option.

-help
-----

The -help option displays the options accepted by NENoCSi (the
same list that you can see above).

-config S
---------

With the -config option you can provide the name (S) of the YAML file that should be
used to read in a configuration for the simulation. By default, NENoCSi looks for a
file "config.yaml" next to it.

-power S
--------

With the -power option you can provide the name (S) of the YAML file that contains the
parameters for estimating the energy figures. By default, NENoCSi looks for a file
"power.yaml" next to it.

-nest_inp_file S
----------------

With the -nest_inp_file option you can provide the name (S) of a YAML file that
contains network traffic generated by NEST. If this combination is used, the global
parameter traffic_distribution is set to TRAFFIC_NEST_TRACE automatically.

-nest_t_mul F
-------------

NEST time stamps are specified in milliseconds whereas time stamps in NENoCSi are
specified in picoseconds by default. This option allows to provide the proper
conversion factor (F). It is set to 1e9 by default. By reducing this conversion
factor, an accelerated neuroscientific simulation with respect to biological real
time can be emulated.

-verbose S
----------

With the -verbose option you can control the verbosity level of the output generated
by NENoCSi.

By default, or if the global parameter verbose_mode is set to VERBOSE_OFF, only few
information on loaded files, executed simulation cycles as well as the aggregated
statistics will be shown: the number of received packets, the number of received
flits, the received over ideal flits ratio, the average wireless utilization,
global average delay, maximum delay, network throughput, average throughput per tile,
consumed energy (total/static/dynamic) and - in the case of input generated by NEST -
maximum and average burst lengths.

If the global parameter verbose_mode is set to VERBOSE_MEDIUM or VERBOSE_HIGH,
additionally configuration parameters are reported.

Note: If the DEBUG option was uncommented in the Makefile during compilation,
flit transmissions are reported in detail in all cases. However, if global parameter
verbose_mode is set to VERBOSE_MEDIUM, destination nodes of wired transfers are
denoted in addition. If verbose_mode was set to VERBOSE_HIGH, extended information on
the current flit are printed instead of the default short notation. 

-trace FILENAME
---------------

Use the -trace option to dump all SystemC signals of the NoC (clock, reset, req_rx,
ack_rx, etc.) to a VCD file named 'FILENAME.vcd'. By default, no output is generated.

A tool commonly used to visualize VCD trace files is GTKWave: if you are using Linux
you should find a package with this name (lowercase) for your distribution.

-dimx N / -dimy N / -dtiles N
-----------------------------

The options -dimx and -dimy are used to set topology information, i.e. the size of
the mesh constituting the NoC. In case of a delta network, the option -dtiles is
used to set the number of tiles instead.

-buffer N
---------

The option -buffer defines the buffer depth at the input of each router. This size is
expressed in flits.

-buffer_tt / -buffer_ft
-----------------------

The options -buffer_tt and -buffer_ft set the depths of the buffers at the interfaces
of a hub to and from a tile, respectively. This size is expressed in flits.

-buffer_antenna
---------------

The option -buffer_antenna sets the depths of the transmit and receive buffers of a
hub to and from a channel,  respectively. This size is expressed in flits.

-vc N
-----

This option sets the number of virtual channels. For torus shaped networks it has to
be set to 4 due to the scheme used for deadlock avoidance.

-winoc
------

Enable wireless transmissions via hubs. If set to false, wireless channel
configuration is ignored.

-winoc_dst_hops
---------------

This option sets the maximum number of hops between the target radio hub and the
destination node. It is only supported in the butterfly topology.

-wirxsleep
----------

There are certain circumstances under which some components (like buffers, the
receiver, etc.) in a hub can be switched off for a number of cycles. More details
are provided in [1] and [2]. Such power-off modes are controlled by the power
manager, which is enabled by this option. Note that the power manager is only
supported for wormhole routing, i.e. if the number of virtual channels is equal to 1.

-size Nmin Nmax
---------------

The option -size is used to define the minimum and maximum packet size in flits.
For all traffic distributions except TRAFFIC_NEST_TRACE, the packet size is generated
randomly between Nmin and Nmax. For fixed packet size just use Nmin = Nmax.
If the traffic distribution is set to TRAFFIC_NEST_TRACE, Nmin should be set to 1 and
Nmax depends on the casting type used. For unicast it is set to 1 flit. For local
multicast it is set to a reasonable number of flits.

-flit N
-------

The option -flit sets the width of a flit in bits.

-topology S
-----------

The option -topology sets the network topology, i.e. the arrangement and interconnection
of tiles, to be used. Supported are MESH, TORUS, BUTTERFLY, BASELINE, and OMEGA. Note
that in case of the TORUS topology, also XY_TORUS routing as well as four virtual channels
have to be used.

-routing S
----------

The -routing option enables the selection of a routing algorithm. Available routing
algorithms are XY, XY_TORUS, WEST_FIRST, NORTH_LAST, NEGATIVE_FIRST, ODD_EVEN, DYAD F,
and TABLE_BASED S.

-sel S
------

With the -sel option you can choose the selection function. Available selection
functions are RANDOM, BUFFER_LEVEL, and NOP. The default is RANDOM. In case of
(partially) adaptive routing, a selection function is applied to choose the output
port to which every flit of a packet has to be sent. Rather than using a pseudo-
random algorithm, also the buffer-level strategy may be selected. Here the favorite
output ports are those offering the largest amount of free channels in the target
buffer. The Neighbors-on-Path selection strategy extends this concept as explained
in [3].

-pir F S
--------

With the -pir option you can set the packet injection rate (PIR) to the specified
real value F. String S defines the type of temporal distribution. In particular you
can decide if the traffic generation is patterned according to a poisson, burst,
pseudo-pareto, or custom distribution.  

-traffic S
----------

The -traffic option is used to set the spacial distribution of traffic. In
particular you can define the method for selecting the destination node. Available
methods are random, local, ulocal, transpose1, transpose2, bitreversal, butterfly,
shuffle and table. For random traffic, you can define some nodes as hot spot nodes.
This is accomplished with the -hs option. If a NEST input file is specified, the
global parameter traffic_distribution is automatically set to TRAFFIC_NEST_TRACE.

-casting S
----------

If traffic generated by NEST is used, i.e. if the global parameter
traffic_distribution is set to TRAFFIC_NEST_TRACE, a casting type can be selected
with this option. Available casting types are unicast (UC) and local multicast
(LMC). Both, destination-address driven as well as source-address driven local
multicast can be modeled depending on the input file used.

-hs N F
-------

The -hs option is used to specify the hot-spot nodes. Along with the node
identifier (N) the probability of traffic being generated by this node (F) needs
to be specified. Hot-spot nodes are only supported in connection with random
traffic.

-warmup N
---------

The -warmup option specifies the number of cycles that are disregarded for the
computation of statistics.

-seed N
-------

The -seed option is used to set the seed of the random number generator used
by the simulator. The latter, by default, will use the standard time() function
to generate a seed.

-detailed
---------

The -detailed option provides per-communication statistics for mesh and torus
networks. During a simulation, different statistical key figures are collected per
destination node. Using the -detailed option, a table is printed for each destination
node at the end of a simulation, containing entries for each source-destination pair
that reveal the values of these statistical keyfigures. In particular, maximum and
average delay, throughput, the number of received packets as well as the number of
received flits are reported.
In addition, two matrices with the dimensions of the network are created as output,
which contain the number of flits routed by a node as well as the maximum delay
observed to reach a node.
Also, component or even action wise breakdowns of consumed static and dynamic
energies are printed.
Finally, some statistics regarding the power manager - separated for transmit and
receive operations - may be shown.

-show_buf_stats
---------------

If the option -show_buf_stats is used, a table with mean and maximum buffer
occupancies is shown for mesh and torus networks. Rows are determined by the
router and virtual channel ID, while columns are determined by the direction
(north, east, south, west, local and hub).

-volume N
---------

The -volume option is used to stop the simulation either when the maximum
number of cycles has been reached or when N flits have been delivered.

-asciimonitor
-------------

Experimental feature that tries to show an online display of the number of
free slots in the buffers of each router for each point of the compass and
for the first virtual channel in mesh and torus networks (east and west may
be flipped, currently).

-sim N
------

The -sim option is used to specify the number of clock cycles that have to be
simulated.

-ofile_suffix S
---------------

With this option you can set a suffix (S) that is appended to the strings
"Delays" and "Flits_Routed" and followed by the file name specifier ".csv"
in order to export two output files into the subfolder "data" that contain
the vector of latencies as well as the matrix of routed flits.
If this combination is provided, the global variable create_output_files
is automatically set to true.

Examples
--------

If issued in the "bin" subdirectory of this release, the following command
runs a simulation extending over 10000 cycles without warm-up time with a
random distribution of destination nodes and packet sizes between 2 and 8
flits. Make sure that config.yaml and power.yaml both are located in the
same directory as well.

  ./nenocsi -sim 10000 -traffic random -size 2 8

You may want to specify a warm-up time of 2000 cycles and also to change
the network dimensions from the default size of 6x6 to something else,
e.g. 4x4. This can be achieved with the following extended command:

  ./nenocsi -sim 10000 -traffic random -size 2 8 -warmup 2000 -dimx 4 -dimy 4

=====================================================================================

References
----------

[1]  V. Catania, A. Mineo, S. Monteleone, M. Palesi, and D. Patti, "Improving the
     energy efficiency of wireless Network on Chip architectures through online
     selective buffers and receivers shutdown," 2016 13th IEEE Annual Consumer
     Communications & Networking Conference (CCNC), Las Vegas, NV, 2016, pp.
     668-673, doi: 10.1109/CCNC.2016.7444860
[2]  V. Catania, A. Mineo, S. Monteleone, A. Palesi, and D. Patti, "Energy efficient
     transceiver in wireless Network on Chip architectures," 2016 Design,
     Automation & Test in Europe Conference & Exhibition (DATE), Dresden, Germany,
     2016, pp. 1321-1326
[3]  G. Ascia, V. Catania, M. Palesi, and D. Patti, "Neighbors-on-Path: A new
     selection strategy for on-chip networks," 2006 IEEE /ACM/IFIP Workshop on
     Embedded Systems for Real Time Multimedia, Seoul, Korea, 2006, pp. 79-84,
     doi: 10.1109/ESTMED.2006.321278
