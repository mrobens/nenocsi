/*
 * Noxim - the NoC Simulator
 *
 * (C) 2005-2018 by the University of Catania
 * For the complete list of authors refer to file ../doc/AUTHORS.txt
 * For the license applied to these sources refer to file ../doc/LICENSE.txt
 *
 * This file contains the declaration of the statistics
 */
/*\\\********************************************************************************
 * Downloaded March 23, 2022 from
 * https://github.com/davidepatti/noxim/tree/c52ebce2217e57bcd4ff11a97b400323bd00acd5
 ************************************************************************************
 *
 * NENoCSi: Patched version of Noxim to process traffic generated by NEST
 * Modifications Copyright (C) 2022-2023 Forschungszentrum Juelich GmbH, ZEA-2
 * Author: Markus Robens <https://www.fz-juelich.de/profile/robens_m>
 * For the license applied to these modifications and NENoCSi as a whole
 * refer to file ../doc/LICENSE_NENOCSI.txt
 * 
 * The declaration of a function is added, that appends all latencies within the
 * communication history to the latency vector passed as reference. 
 * Modifications are highlighted by comments consisting of initials and date.
 *
 *///******************************************************************************** 

#ifndef __NENOCSISTATS_H__                                                                                                                     // MR: Modified 2023/04/21
#define __NENOCSISTATS_H__                                                                                                                     // MR: Modified 2023/04/21

#include <iostream>
#include <iomanip>
#include <vector>
#include "DataStructs.h"
#include "Power.h"
using namespace std;

struct CommHistory {
    int src_id;
     vector < double >delays;
    unsigned int total_received_flits;
    double last_received_flit_time;
};

class Stats {

  public:

    Stats() {
    } 

    void configure(const int node_id, const double _warm_up_time);

    // Access point for stats update
    void receivedFlit(const double arrival_time, const Flit & flit);

    // Returns the average delay (cycles) for the current node as
    // regards to the communication whose source is src_id
    double getAverageDelay(const int src_id);

    // Returns the average delay (cycles) for the current node
    double getAverageDelay();

    // Returns the max delay for the current node as regards the
    // communication whose source node is src_id
    double getMaxDelay(const int src_id);

    // Returns the max delay (cycles) for the current node
    double getMaxDelay();

    // Adds all delays of the local communication history to                                                                                   // MR: Added 2022/04/04
    // the overall delay vector passed as reference                                                                                            // MR: Added 2022/04/04
    void setDelays(vector<double>& overall_delays) const;                                                                                      // MR: Added 2022/04/04

    // Returns the average throughput (flits/cycle) for the current node
    // and for the communication whose source is src_id
    double getAverageThroughput(const int src_id);

    // Returns the average throughput (flits/cycle) for the current node
    double getAverageThroughput();

    // Returns the number of received packets from current node
    unsigned int getReceivedPackets();

    // Returns the number of received flits from current node
    unsigned int getReceivedFlits();

    // Returns the number of communications whose destination is the
    // current node
    unsigned int getTotalCommunications();

    // Returns the energy consumed for communication src_id-->dst_id
    // under the following assumptions: (i) Minimal routing is
    // considered, (ii) constant packet size is considered (as the
    // average between the minimum and the maximum packet size).
    double getCommunicationEnergy(int src_id, int dst_id);

    // Shows statistics for the current node
    void showStats(int curr_node, std::ostream & out =
		   std::cout, bool header = false);


  private:

    int id;
    vector < CommHistory > chist;
    double warm_up_time;

    int searchCommHistory(int src_id);
};

#endif
