/*
 * Noxim - the NoC Simulator
 *
 * (C) 2005-2018 by the University of Catania
 * For the complete list of authors refer to file ../doc/AUTHORS.txt
 * For the license applied to these sources refer to file ../doc/LICENSE.txt
 *
 * This file contains the implementaton of the global statistics
 */
/*\\\********************************************************************************
 * Downloaded March 23, 2022 from
 * https://github.com/davidepatti/noxim/tree/c52ebce2217e57bcd4ff11a97b400323bd00acd5
 ************************************************************************************
 *
 * NENoCSi: Patched version of Noxim to process traffic generated by NEST
 * Modifications Copyright (C) 2022-2023 Forschungszentrum Juelich GmbH, ZEA-2
 * Author: Markus Robens <https://www.fz-juelich.de/profile/robens_m>
 * For the license applied to these modifications and NENoCSi as a whole
 * refer to file ../doc/LICENSE_NENOCSI.txt
 * 
 * In this patched version, three functions are added to this file. They 
 * collect all latencies in a vector, determine the number of flits scheduled 
 * and provide for the export of the latency vector as well as the matrix of 
 * routed flits. In addition statistics on burst lengths are displayed. Finally, 
 * some issues caused by the introduction of the torus topology are fixed.
 *
 * Modifications are highlighted by comments consisting of initials and date.
 *
 *///******************************************************************************** 

#include "GlobalStats.h"
using namespace std;

GlobalStats::GlobalStats(const NoC * _noc)
{
    noc = _noc;

	#ifdef TESTING
    drained_total = 0;
	#endif
}

double GlobalStats::getAverageDelay()
{
    unsigned int total_packets = 0;
    double avg_delay = 0.0;

    if ((GlobalParams::topology == TOPOLOGY_MESH) ||
	(GlobalParams::topology == TOPOLOGY_TORUS))                                                                                            // MR: Added 2022/04/14
    {
	for (int y = 0; y < GlobalParams::mesh_dim_y; y++)
	    for (int x = 0; x < GlobalParams::mesh_dim_x; x++) 
	    {
		unsigned int received_packets =
		    noc->t[x][y]->r->stats.getReceivedPackets();

		if (received_packets) 
		{
		    avg_delay +=
			received_packets *
			noc->t[x][y]->r->stats.getAverageDelay();
		    total_packets += received_packets;
		}
	    }
    }
    else // other delta topologies
    { 
	for (int y = 0; y < GlobalParams::n_delta_tiles; y++)
	{
	    unsigned int received_packets =
		noc->core[y]->r->stats.getReceivedPackets();

	    if (received_packets) 
	    {
		avg_delay +=
		    received_packets *
		    noc->core[y]->r->stats.getAverageDelay();
		total_packets += received_packets;
	    }
	}

    }


    avg_delay /= (double) total_packets;

    return avg_delay;
}



double GlobalStats::getAverageDelay(const int src_id,
					 const int dst_id)
{
    Tile *tile = noc->searchNode(dst_id);

    assert(tile != NULL);

    return tile->r->stats.getAverageDelay(src_id);
}

double GlobalStats::getMaxDelay()
{
    double maxd = -1.0;

    if ((GlobalParams::topology == TOPOLOGY_MESH) ||
	(GlobalParams::topology == TOPOLOGY_TORUS))                                                                                            // MR: Added 2022/04/14
    {
	for (int y = 0; y < GlobalParams::mesh_dim_y; y++)
	    for (int x = 0; x < GlobalParams::mesh_dim_x; x++) 
	    {
		Coord coord;
		coord.x = x;
		coord.y = y;
		int node_id = coord2Id(coord);
		double d = getMaxDelay(node_id);
		if (d > maxd)
		    maxd = d;
	    }

    }
    else  // other delta topologies 
    {
	for (int y = 0; y < GlobalParams::n_delta_tiles; y++)
	{
	    double d = getMaxDelay(y);
	    if (d > maxd)
		maxd = d;
	}
    }

    return maxd;
}

double GlobalStats::getMaxDelay(const int node_id)
{
    if ((GlobalParams::topology == TOPOLOGY_MESH) ||
	(GlobalParams::topology == TOPOLOGY_TORUS))                                                                                            // MR: Added 2022/04/14
    {
	Coord coord = id2Coord(node_id);

	unsigned int received_packets =
	    noc->t[coord.x][coord.y]->r->stats.getReceivedPackets();

	if (received_packets)
	    return noc->t[coord.x][coord.y]->r->stats.getMaxDelay();
	else
	    return -1.0;
    }
    else // other delta topologies
    {
	unsigned int received_packets =
	    noc->core[node_id]->r->stats.getReceivedPackets();
	if (received_packets)
	    return noc->core[node_id]->r->stats.getMaxDelay();
	else
	    return -1.0;
    }

}

double GlobalStats::getMaxDelay(const int src_id, const int dst_id)
{
    Tile *tile = noc->searchNode(dst_id);

    assert(tile != NULL);

    return tile->r->stats.getMaxDelay(src_id);
}

vector < vector < double > > GlobalStats::getMaxDelayMtx()
{
    vector < vector < double > > mtx;

    assert((GlobalParams::topology == TOPOLOGY_MESH) ||
	   (GlobalParams::topology == TOPOLOGY_TORUS));                                                                                        // MR: Added 2022/04/14 

    mtx.resize(GlobalParams::mesh_dim_y);
    for (int y = 0; y < GlobalParams::mesh_dim_y; y++)
	mtx[y].resize(GlobalParams::mesh_dim_x);

    for (int y = 0; y < GlobalParams::mesh_dim_y; y++)
	for (int x = 0; x < GlobalParams::mesh_dim_x; x++) 
	{
	    Coord coord;
	    coord.x = x;
	    coord.y = y;
	    int id = coord2Id(coord);
	    mtx[y][x] = getMaxDelay(id);
	}

    return mtx;
}

void GlobalStats::setOverallDelays(vector<double>& ovl_delays) const                                                                           // MR: Added 2022/04/04
{                                                                                                                                              // MR: Added 2022/04/04
  if ((GlobalParams::topology == TOPOLOGY_MESH) ||                                                                                             // MR: Added 2022/04/04
      (GlobalParams::topology == TOPOLOGY_TORUS)) {                                                                                            // MR: Added 2022/04/14
    for (int y = 0; y < GlobalParams::mesh_dim_y; y++) {                                                                                       // MR: Added 2022/04/04
      for (int x = 0; x < GlobalParams::mesh_dim_x; x++) {                                                                                     // MR: Added 2022/04/04
	noc->t[x][y]->r->stats.setDelays(ovl_delays);                                                                                          // MR: Added 2022/04/04
      }                                                                                                                                        // MR: Added 2022/04/04
    }                                                                                                                                          // MR: Added 2022/04/04
  }                                                                                                                                            // MR: Added 2022/04/04
  else {                                                                                                                                       // MR: Added 2022/04/04
    for (int y = 0; y < GlobalParams::n_delta_tiles; y++) {                                                                                    // MR: Added 2022/04/04
      noc->core[y]->r->stats.setDelays(ovl_delays);                                                                                            // MR: Added 2022/04/04
    }                                                                                                                                          // MR: Added 2022/04/04
  }                                                                                                                                            // MR: Added 2022/04/04
}                                                                                                                                              // MR: Added 2022/04/04

long GlobalStats::getOverallQueuedFlits() const                                                                                                // MR: Added 2022/04/08
{                                                                                                                                              // MR: Added 2022/04/08
  assert(GlobalParams::traffic_distribution == TRAFFIC_NEST_TRACE);                                                                            // MR: Added 2022/04/19
  long queuedFlits = 0;                                                                                                                        // MR: Added 2022/04/08
  if ((GlobalParams::topology == TOPOLOGY_MESH) ||                                                                                             // MR: Added 2022/04/08
      (GlobalParams::topology == TOPOLOGY_TORUS)) {                                                                                            // MR: Added 2022/04/14
    for (int y = 0; y < GlobalParams::mesh_dim_y; y++) {                                                                                       // MR: Added 2022/04/08
      for (int x = 0; x < GlobalParams::mesh_dim_x; x++) {                                                                                     // MR: Added 2022/04/08
	queuedFlits += noc->t[x][y]->pe->getQueuedFlits();                                                                                     // MR: Added 2022/04/08
      }                                                                                                                                        // MR: Added 2022/04/08
    }                                                                                                                                          // MR: Added 2022/04/08
  }                                                                                                                                            // MR: Added 2022/04/08
  else {                                                                                                                                       // MR: Added 2022/04/08
    for (int y = 0; y < GlobalParams::n_delta_tiles; y++) {                                                                                    // MR: Added 2022/04/08
      queuedFlits += noc->core[y]->pe->getQueuedFlits();                                                                                       // MR: Added 2022/04/08
    }                                                                                                                                          // MR: Added 2022/04/08
  }                                                                                                                                            // MR: Added 2022/04/08
  return queuedFlits;                                                                                                                          // MR: Added 2022/04/08
}                                                                                                                                              // MR: Added 2022/04/08


double GlobalStats::getAverageThroughput(const int src_id, const int dst_id)
{
    Tile *tile = noc->searchNode(dst_id);

    assert(tile != NULL);

    return tile->r->stats.getAverageThroughput(src_id);
}

/*
double GlobalStats::getAverageThroughput()
{
    unsigned int total_comms = 0;
    double avg_throughput = 0.0;

    for (int y = 0; y < GlobalParams::mesh_dim_y; y++)
	for (int x = 0; x < GlobalParams::mesh_dim_x; x++) {
	    unsigned int ncomms =
		noc->t[x][y]->r->stats.getTotalCommunications();

	    if (ncomms) {
		avg_throughput +=
		    ncomms * noc->t[x][y]->r->stats.getAverageThroughput();
		total_comms += ncomms;
	    }
	}

    avg_throughput /= (double) total_comms;

    return avg_throughput;
}
*/

double GlobalStats::getAggregatedThroughput()
{
    int total_cycles = GlobalParams::simulation_time - GlobalParams::stats_warm_up_time;

    return (double)getReceivedFlits()/(double)(total_cycles);
}

unsigned int GlobalStats::getReceivedPackets()
{
    unsigned int n = 0;

    if ((GlobalParams::topology == TOPOLOGY_MESH) ||
	(GlobalParams::topology == TOPOLOGY_TORUS))                                                                                            // MR: Added 2022/04/14
    {
    	for (int y = 0; y < GlobalParams::mesh_dim_y; y++)
		for (int x = 0; x < GlobalParams::mesh_dim_x; x++)
	    n += noc->t[x][y]->r->stats.getReceivedPackets();
    }
    else // other delta topologies
    {
    	for (int y = 0; y < GlobalParams::n_delta_tiles; y++)
	    n += noc->core[y]->r->stats.getReceivedPackets();
    }

    return n;
}

unsigned int GlobalStats::getReceivedFlits()
{
    unsigned int n = 0;
    if ((GlobalParams::topology == TOPOLOGY_MESH) ||
	(GlobalParams::topology == TOPOLOGY_TORUS))                                                                                            // MR: Added 2022/04/14
    {
	for (int y = 0; y < GlobalParams::mesh_dim_y; y++)
	    for (int x = 0; x < GlobalParams::mesh_dim_x; x++) {
		n += noc->t[x][y]->r->stats.getReceivedFlits();
#ifdef TESTING
		drained_total += noc->t[x][y]->r->local_drained;
#endif
	    }
    }
    else // other delta topologies
    {
	for (int y = 0; y < GlobalParams::n_delta_tiles; y++)
	{
	    n += noc->core[y]->r->stats.getReceivedFlits();
#ifdef TESTING
	    drained_total += noc->core[y]->r->local_drained;
#endif
	}
    }

    return n;
}

double GlobalStats::getThroughput()
{
    if ((GlobalParams::topology == TOPOLOGY_MESH) ||
        (GlobalParams::topology == TOPOLOGY_TORUS))                                                                                            // MR: Added 2022/04/14
    {
	int number_of_ip = GlobalParams::mesh_dim_x * GlobalParams::mesh_dim_y;
	return (double)getAggregatedThroughput()/(double)(number_of_ip);
    }
    else // other delta topologies
    {
	int number_of_ip = GlobalParams::n_delta_tiles;
	return (double)getAggregatedThroughput()/(double)(number_of_ip);
    }
}

// Only accounting IP that received at least one flit
double GlobalStats::getActiveThroughput()
{
    int total_cycles =
	GlobalParams::simulation_time -
	GlobalParams::stats_warm_up_time;
    unsigned int n = 0;
    unsigned int trf = 0;
    unsigned int rf ;
    if ((GlobalParams::topology == TOPOLOGY_MESH) ||
	(GlobalParams::topology == TOPOLOGY_TORUS))                                                                                            // MR: Added 2022/04/14
    {
	for (int y = 0; y < GlobalParams::mesh_dim_y; y++)
	    for (int x = 0; x < GlobalParams::mesh_dim_x; x++) 
	    {
		rf = noc->t[x][y]->r->stats.getReceivedFlits();

		if (rf != 0)
		    n++;

		trf += rf;
	    }
    }
    else // other delta topologies
    {
	for (int y = 0; y < GlobalParams::n_delta_tiles; y++)
	{
	    rf = noc->core[y]->r->stats.getReceivedFlits();

	    if (rf != 0)
		n++;

	    trf += rf;
	}
    }

    return (double) trf / (double) (total_cycles * n);

}

vector < vector < unsigned long > > GlobalStats::getRoutedFlitsMtx()
{

    vector < vector < unsigned long > > mtx;
    assert ((GlobalParams::topology == TOPOLOGY_MESH) ||
	    (GlobalParams::topology == TOPOLOGY_TORUS));                                                                                       // MR: Added 2022/04/14 

    mtx.resize(GlobalParams::mesh_dim_y);
    for (int y = 0; y < GlobalParams::mesh_dim_y; y++)
	mtx[y].resize(GlobalParams::mesh_dim_x);

    for (int y = 0; y < GlobalParams::mesh_dim_y; y++)
	for (int x = 0; x < GlobalParams::mesh_dim_x; x++)
	    mtx[y][x] = noc->t[x][y]->r->getRoutedFlits();


    return mtx;
}

unsigned int GlobalStats::getWirelessPackets()
{
    unsigned int packets = 0;

    // Wireless noc
    for (map<int, HubConfig>::iterator it = GlobalParams::hub_configuration.begin();
            it != GlobalParams::hub_configuration.end();
            ++it)
    {
	int hub_id = it->first;

	map<int,Hub*>::const_iterator i = noc->hub.find(hub_id);
	Hub * h = i->second;

	packets+= h->wireless_communications_counter;
    }
    return packets;
}

double GlobalStats::getDynamicPower()
{
    double power = 0.0;

    // Electric noc
    if ((GlobalParams::topology == TOPOLOGY_MESH) ||
	(GlobalParams::topology == TOPOLOGY_TORUS))                                                                                            // MR: Added 2022/04/14
    {
	for (int y = 0; y < GlobalParams::mesh_dim_y; y++)
	    for (int x = 0; x < GlobalParams::mesh_dim_x; x++)
		power += noc->t[x][y]->r->power.getDynamicPower();
    }
    else // other delta topologies
    {
	int stg = log2(GlobalParams::n_delta_tiles);
	int sw = GlobalParams::n_delta_tiles/2; //sw: switch number in each stage
	// Dimensions of the delta switch block network
	int dimX = stg;
	int dimY = sw;

	// power for delta topologies cores
	for (int y = 0; y < GlobalParams::n_delta_tiles; y++)
	    power += noc->core[y]->r->power.getDynamicPower();

	// power for delta topologies switches 
	for (int y = 0; y < dimY; y++)
	    for (int x = 0; x < dimX; x++)
		power += noc->t[x][y]->r->power.getDynamicPower();
    }

    // Wireless noc
    for (map<int, HubConfig>::iterator it = GlobalParams::hub_configuration.begin();
	    it != GlobalParams::hub_configuration.end();
	    ++it)
    {
	int hub_id = it->first;

	map<int,Hub*>::const_iterator i = noc->hub.find(hub_id);
	Hub * h = i->second;

	power+= h->power.getDynamicPower();
    }
    return power;
}

double GlobalStats::getStaticPower()
{
    double power = 0.0;

    if ((GlobalParams::topology == TOPOLOGY_MESH) ||
	(GlobalParams::topology == TOPOLOGY_TORUS))                                                                                            // MR: Added 2022/04/14
    {
    	for (int y = 0; y < GlobalParams::mesh_dim_y; y++)
		for (int x = 0; x < GlobalParams::mesh_dim_x; x++)
	    power += noc->t[x][y]->r->power.getStaticPower();
    }
    else // other delta topologies
    {
	int stg = log2(GlobalParams::n_delta_tiles);
	int sw = GlobalParams::n_delta_tiles/2; //sw: switch number in each stage
	// Dimensions of the delta switch block network
	int dimX = stg;
	int dimY = sw;
	// power for delta topologies switches 
	for (int y = 0; y < dimY; y++)
	    for (int x = 0; x < dimX; x++)
		power += noc->t[x][y]->r->power.getDynamicPower();

	// delta cores
    	for (int y = 0; y < GlobalParams::n_delta_tiles; y++)
	    power += noc->core[y]->r->power.getStaticPower();
    }

    // Wireless noc
    for (map<int, HubConfig>::iterator it = GlobalParams::hub_configuration.begin();
            it != GlobalParams::hub_configuration.end();
            ++it)
    {
	int hub_id = it->first;

	map<int,Hub*>::const_iterator i = noc->hub.find(hub_id);
	Hub * h = i->second;

	power+= h->power.getStaticPower();
    }
    return power;
}

void GlobalStats::showStats(std::ostream & out, bool detailed)
{
    if (detailed) 
    {
        assert ((GlobalParams::topology == TOPOLOGY_MESH) ||
	        (GlobalParams::topology == TOPOLOGY_TORUS));                                                                                   // MR: Added 2022/04/14
	out << endl << "detailed = [" << endl;

	for (int y = 0; y < GlobalParams::mesh_dim_y; y++)
	    for (int x = 0; x < GlobalParams::mesh_dim_x; x++)
		noc->t[x][y]->r->stats.showStats(y * GlobalParams:: mesh_dim_x + x, out, true);
	out << "];" << endl;

	// show MaxDelay matrix
	vector < vector < double > > md_mtx = getMaxDelayMtx();

	out << endl << "max_delay = [" << endl;
	for (unsigned int y = 0; y < md_mtx.size(); y++) 
	{
	    out << "   ";
	    for (unsigned int x = 0; x < md_mtx[y].size(); x++)
		out << setw(6) << md_mtx[y][x];
	    out << endl;
	}
	out << "];" << endl;

	// show RoutedFlits matrix
	vector < vector < unsigned long > > rf_mtx = getRoutedFlitsMtx();

	out << endl << "routed_flits = [" << endl;
	for (unsigned int y = 0; y < rf_mtx.size(); y++) 
	{
	    out << "   ";
	    for (unsigned int x = 0; x < rf_mtx[y].size(); x++)
		out << setw(10) << rf_mtx[y][x];
	    out << endl;
	}
	out << "];" << endl;

	showPowerBreakDown(out);
	showPowerManagerStats(out);
    }

#ifdef DEBUG

    if ((GlobalParams::topology == TOPOLOGY_MESH) ||
	(GlobalParams::topology == TOPOLOGY_TORUS))                                                                                            // MR: Added 2022/04/14
    {
        out << "Queue sizes: ";                                                                                                                // MR: Added 2022/04/01
        for (int y = 0; y < GlobalParams::mesh_dim_y; y++)
	    for (int x = 0; x < GlobalParams::mesh_dim_x; x++)
		out << "PE["<<x << "," << y<< "]" << noc->t[x][y]->pe->getQueueSize()<< ",";
	cout << "\b " << endl;                                                                                                                 // MR: Added 2022/04/01
    }
    else // other delta topologies
    {
	out << "Queue sizes: " ;
	for (int i=0;i<GlobalParams::n_delta_tiles;i++)
		out << "PE"<<i << ": " << noc->core[i]->pe->getQueueSize()<< ",";
	out << endl;
    }
	
    out << endl;
#endif

    //int total_cycles = GlobalParams::simulation_time - GlobalParams::stats_warm_up_time;
    if (GlobalParams::traffic_distribution == TRAFFIC_NEST_TRACE)                                                                              // MR: Added 2022/04/29
    {                                                                                                                                          // MR: Added 2022/04/29
      out << "% NEST maximum burst length: " << noc->gnesttrace.getMaxNestBurst() << endl;                                                     // MR: Added 2022/04/29
      out << "% NEST average burst length: " << noc->gnesttrace.getAvgNestBurst() << endl;                                                     // MR: Added 2022/04/29
    }                                                                                                                                          // MR: Added 2022/04/29
    out << "% Total received packets: " << getReceivedPackets() << endl;
    out << "% Total received flits: " << getReceivedFlits() << endl;
    if (GlobalParams::traffic_distribution != TRAFFIC_TABLE_BASED)                                                                             // MR: Added 2022/04/19
      out << "% Received/Ideal flits Ratio: " << getReceivedIdealFlitRatio() << endl;
    out << "% Average wireless utilization: " << getWirelessPackets()/(double)getReceivedPackets() << endl;
    out << "% Global average delay (cycles): " << getAverageDelay() << endl;
    out << "% Max delay (cycles): " << getMaxDelay() << endl;
    out << "% Network throughput (flits/cycle): " << getAggregatedThroughput() << endl;
    out << "% Average IP throughput (flits/cycle/IP): " << getThroughput() << endl;
    out << "% Total energy (J): " << getTotalPower() << endl;
    out << "% \tDynamic energy (J): " << getDynamicPower() << endl;
    out << "% \tStatic energy (J): " << getStaticPower() << endl;

    if (GlobalParams::create_output_files) {                                                                                                   // MR: Added 2022/04/04
      setOverallDelays(overall_delays);                                                                                                        // MR: Added 2022/04/04
      assert(exportStatData());                                                                                                                // MR: Added 2022/04/04
    }                                                                                                                                          // MR: Added 2022/04/04

    if (GlobalParams::show_buffer_stats)
      showBufferStats(out);

}

void GlobalStats::updatePowerBreakDown(map<string,double> &dst,PowerBreakdown* src)
{
    for (int i=0;i!=src->size;i++)
    {
		dst[src->breakdown[i].label]+=src->breakdown[i].value;
    }
}

void GlobalStats::showPowerManagerStats(std::ostream & out)
{
    std::streamsize p = out.precision();
    int total_cycles = sc_time_stamp().to_double() / GlobalParams::clock_period_ps - GlobalParams::reset_time;

    out.precision(4);

    out << "powermanager_stats_tx = [" << endl;
    out << "%\tFraction of: TX Transceiver off (TTXoff), AntennaBufferTX off (ABTXoff) " << endl;
    out << "%\tHUB\tTTXoff\tABTXoff\t" << endl;

    for (map<int, HubConfig>::iterator it = GlobalParams::hub_configuration.begin();
            it != GlobalParams::hub_configuration.end();
            ++it)
    {
	int hub_id = it->first;

	map<int,Hub*>::const_iterator i = noc->hub.find(hub_id);
	Hub * h = i->second;

	out << "\t" << hub_id << "\t" << std::fixed << (double)h->total_ttxoff_cycles/total_cycles << "\t";

	int s = 0;
	for (map<int,int>::iterator i = h->abtxoff_cycles.begin(); i!=h->abtxoff_cycles.end();i++) s+=i->second;

	out << (double)s/h->abtxoff_cycles.size()/total_cycles << endl;
    }

    out << "];" << endl;



    out << "powermanager_stats_rx = [" << endl;
    out << "%\tFraction of: RX Transceiver off (TRXoff), AntennaBufferRX off (ABRXoff), BufferToTile off (BTToff) " << endl;
    out << "%\tHUB\tTRXoff\tABRXoff\tBTToff\t" << endl;



    for (map<int, HubConfig>::iterator it = GlobalParams::hub_configuration.begin();
            it != GlobalParams::hub_configuration.end();
            ++it)
    {
	string bttoff_str;

	out.precision(4);

	int hub_id = it->first;

	map<int,Hub*>::const_iterator i = noc->hub.find(hub_id);
	Hub * h = i->second;

	out << "\t" << hub_id << "\t" << std::fixed << (double)h->total_sleep_cycles/total_cycles << "\t";

	int s = 0;
	for (map<int,int>::iterator i = h->buffer_rx_sleep_cycles.begin();
		i!=h->buffer_rx_sleep_cycles.end();i++)
	    s+=i->second;

	out << (double)s/h->buffer_rx_sleep_cycles.size()/total_cycles << "\t";

	s = 0;
	for (map<int,int>::iterator i = h->buffer_to_tile_poweroff_cycles.begin();
		i!=h->buffer_to_tile_poweroff_cycles.end();i++)
	{
	    double bttoff_fraction = i->second/(double)total_cycles;
	    s+=i->second;
	    if (bttoff_fraction<0.25)
		bttoff_str+=" ";
	    else if (bttoff_fraction<0.5)
		    bttoff_str+=".";
	    else if (bttoff_fraction<0.75)
		    bttoff_str+="o";
	    else if (bttoff_fraction<0.90)
		    bttoff_str+="O";
	    else 
		bttoff_str+="0";
	    

	}
	out << (double)s/h->buffer_to_tile_poweroff_cycles.size()/total_cycles << "\t" << bttoff_str << endl;
    }

    out << "];" << endl;

    out.unsetf(std::ios::fixed);

    out.precision(p);

}

void GlobalStats::showPowerBreakDown(std::ostream & out)
{
    map<string,double> power_dynamic;
    map<string,double> power_static;

    if ((GlobalParams::topology == TOPOLOGY_MESH) ||
	(GlobalParams::topology == TOPOLOGY_TORUS))                                                                                            // MR: Added 2022/04/14
    {
	for (int y = 0; y < GlobalParams::mesh_dim_y; y++)
	    for (int x = 0; x < GlobalParams::mesh_dim_x; x++)
	    {
		updatePowerBreakDown(power_dynamic, noc->t[x][y]->r->power.getDynamicPowerBreakDown());
		updatePowerBreakDown(power_static, noc->t[x][y]->r->power.getStaticPowerBreakDown());
	    }
    }
    else // other delta topologies
    {
	for (int y = 0; y < GlobalParams::n_delta_tiles; y++)
	{
	    updatePowerBreakDown(power_dynamic, noc->core[y]->r->power.getDynamicPowerBreakDown());
	    updatePowerBreakDown(power_static, noc->core[y]->r->power.getStaticPowerBreakDown());
	}
    }

    for (map<int, HubConfig>::iterator it = GlobalParams::hub_configuration.begin();
	    it != GlobalParams::hub_configuration.end();
	    ++it)
    {
	int hub_id = it->first;

	map<int,Hub*>::const_iterator i = noc->hub.find(hub_id);
	Hub * h = i->second;

	updatePowerBreakDown(power_dynamic, 
		h->power.getDynamicPowerBreakDown());

	updatePowerBreakDown(power_static, 
		h->power.getStaticPowerBreakDown());
    }

    printMap("power_dynamic",power_dynamic,out);
    printMap("power_static",power_static,out);

}



void GlobalStats::showBufferStats(std::ostream & out)
{
  out << endl;                                                                                                                                 // MR: Modified 2022/03/31
  out << "Buffer Statistics (invalid buffers are blanked out)" << endl;                                                                        // MR: Modified 2022/03/31
  out << left << setw(16) << "Router id" << setw(16) << "Buffer North" << setw(16) << "Buffer East";                                           // MR: Modified 2022/03/31
  out << setw(16) << "Buffer South" << setw(16) << "Buffer West" << setw(16) << "Buffer Local";                                                // MR: Modified 2022/03/31
  out << setw(16) << "Buffer Hub" << endl;                                                                                                     // MR: Modified 2022/03/31
  out << left << setw(16) << "" << setw(8) << "Mean" << setw(8) << "Max" << setw(8) << "Mean";                                                 // MR: Modified 2022/03/31
  out << setw(8) << "Max" << setw(8) << "Mean" << setw(8) << "Max" << setw(8) << "Mean";                                                       // MR: Modified 2022/03/31
  out << setw(8) << "Max" << setw(8) << "Mean" << setw(8) << "Max" << setw(8) << "Mean";                                                       // MR: Modified 2022/03/31
  out << setw(8) << "Max" << endl;                                                                                                             // MR: Modified 2022/03/31
  
  if ((GlobalParams::topology == TOPOLOGY_MESH) ||
      (GlobalParams::topology == TOPOLOGY_TORUS))                                                                                              // MR: Added 2022/04/14
    {
    	for (int y = 0; y < GlobalParams::mesh_dim_y; y++)
    	for (int x = 0; x < GlobalParams::mesh_dim_x; x++)
      	{
	                out << setw(16) <<  noc->t[x][y]->r->local_id;                                                                         // MR: Modified 2022/03/31
			noc->t[x][y]->r->ShowBuffersStats(out);
			//out << endl;                                                                                                         // MR: Modified 2022/03/31
     	}
    }
    else // other delta topologies
    {
    	for (int y = 0; y < GlobalParams::n_delta_tiles; y++)
    	{
	                out << setw(16) << noc->core[y]->r->local_id;                                                                          // MR: Modified 2022/03/31
			noc->core[y]->r->ShowBuffersStats(out);
			//out << endl;                                                                                                         // MR: Modified 2022/03/31
     	}
    }

}

double GlobalStats::getReceivedIdealFlitRatio()
{
    int total_cycles;
    total_cycles= GlobalParams::simulation_time - GlobalParams::stats_warm_up_time;
    double ratio;
    if (GlobalParams::traffic_distribution == TRAFFIC_NEST_TRACE)                                                                              // MR: Added 2022/04/19
      ratio = (double) getReceivedFlits() / (double) getOverallQueuedFlits();                                                                  // MR: Added 2022/04/19
    else {                                                                                                                                     // MR: Added 2022/04/19
      if ((GlobalParams::topology == TOPOLOGY_MESH) ||
	  (GlobalParams::topology == TOPOLOGY_TORUS))                                                                                          // MR: Added 2022/04/14
      {
	  ratio = getReceivedFlits() /(GlobalParams::packet_injection_rate * (GlobalParams::min_packet_size +
		      GlobalParams::max_packet_size)/2 * total_cycles * GlobalParams::mesh_dim_y * GlobalParams::mesh_dim_x);
      }
      else // other delta topologies
      {
	  ratio = getReceivedFlits() /(GlobalParams::packet_injection_rate * (GlobalParams::min_packet_size +
		      GlobalParams::max_packet_size)/2 * total_cycles * GlobalParams::n_delta_tiles);
      }
    }                                                                                                                                          // MR: Added 2022/04/19
    return ratio;
}

bool GlobalStats::exportStatData(void) {                                                                                                       // MR: Added 2022/04/04
  string delayOut = (string("Delays").append(GlobalParams::ofile_suffix)).append(".csv");                                                      // MR: Added 2022/04/04
  string routedFlits = (string("Flits_Routed").append(GlobalParams::ofile_suffix)).append(".csv");                                             // MR: Added 2022/04/04
  boost::filesystem::path data("data");                                                                                                        // MR: Added 2022/04/04
  try {                                                                                                                                        // MR: Added 2022/04/04
    bool created = boost::filesystem::create_directory(data);                                                                                  // MR: Added 2022/04/04
    if (created) std::cout << "Created folder 'data' used for output files" << std::endl;                                                      // MR: Added 2022/04/04
    else std::cout << "Folder 'data' already existed. Using it for output files" << std::endl;                                                 // MR: Added 2022/04/04
  }                                                                                                                                            // MR: Added 2022/04/04
  catch (const boost::filesystem::filesystem_error& fse) {                                                                                     // MR: Added 2022/04/04
    std::cout << fse.what() << std::endl;                                                                                                      // MR: Added 2022/04/04
    return false;                                                                                                                              // MR: Added 2022/04/04
  }                                                                                                                                            // MR: Added 2022/04/04
  boost::filesystem::path data1 = data;                                                                                                        // MR: Added 2022/04/04
  ofstream of_dout((data1 /= delayOut).c_str());                                                                                               // MR: Added 2022/04/04
  if (!of_dout)                                                                                                                                // MR: Added 2022/04/04
    return false;                                                                                                                              // MR: Added 2022/04/04
  of_dout << "#Delays collected from all nodes" << std::endl;                                                                                  // MR: Added 2022/04/04
  for (unsigned int i=0; i < overall_delays.size(); i++) {                                                                                     // MR: Added 2022/04/04
    of_dout << overall_delays[i] << std::endl;                                                                                                 // MR: Added 2022/04/04
  }                                                                                                                                            // MR: Added 2022/04/04
  of_dout.close();                                                                                                                             // MR: Added 2022/04/04
  if ((GlobalParams::topology == TOPOLOGY_MESH) ||                                                                                             // MR: Added 2022/04/04
      (GlobalParams::topology == TOPOLOGY_TORUS)) {                                                                                            // MR: Added 2022/04/14
    boost::filesystem::path data2 = data;                                                                                                      // MR: Added 2022/04/04
    ofstream of_rtdout((data2 /= routedFlits).c_str());                                                                                        // MR: Added 2022/04/04
    if (!of_rtdout)                                                                                                                            // MR: Added 2022/04/04
      return false;                                                                                                                            // MR: Added 2022/04/04
    of_rtdout << "#Matrix containing the mumber of routed flits per router" << std::endl;                                                      // MR: Added 2022/04/04
    vector<vector<unsigned long > > flt_routed = getRoutedFlitsMtx();                                                                          // MR: Added 2022/04/04
    for (unsigned int y = 0; y < flt_routed.size(); ++y) {                                                                                     // MR: Added 2022/04/04
      for (unsigned int x=0; x < flt_routed[y].size(); ++x)                                                                                    // MR: Added 2022/04/04
	of_rtdout << x << ", " << y << ", " << flt_routed[y][x] << std::endl;                                                                  // MR: Added 2022/04/04
      of_rtdout << std::endl;                                                                                                                  // MR: Added 2022/04/04
    }                                                                                                                                          // MR: Added 2022/04/04
    of_rtdout.close();                                                                                                                         // MR: Added 2022/04/04
  }                                                                                                                                            // MR: Added 2022/04/04
  return true;                                                                                                                                 // MR: Added 2022/04/04
}                                                                                                                                              // MR: Added 2022/04/04
