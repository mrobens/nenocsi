/*
 * Noxim - the NoC Simulator
 *
 * (C) 2005-2018 by the University of Catania
 * For the complete list of authors refer to file ../doc/AUTHORS.txt
 * For the license applied to these sources refer to file ../doc/LICENSE.txt
 *
 * This file represents the top-level testbench
 */
/*\\\********************************************************************************
 * Downloaded March 23, 2022 from
 * https://github.com/davidepatti/noxim/tree/c52ebce2217e57bcd4ff11a97b400323bd00acd5
 ************************************************************************************
 *
 * NENoCSi: Patched version of Noxim to process traffic generated by NEST
 * Modifications Copyright (C) 2022-2023 Forschungszentrum Juelich GmbH, ZEA-2
 * Author: Markus Robens <https://www.fz-juelich.de/profile/robens_m>
 * For the license applied to these modifications and NENoCSi as a whole
 * refer to file ../doc/LICENSE_NENOCSI.txt
 * 
 * Uses an instance of GlobalNestTrace as attribute and declares a function
 * to create a torus shaped network.
 * Modifications are highlighted by comments consisting of initials and date.
 *
 *///******************************************************************************** 

#ifndef __NENOCSINOC_H__                                                                                                                       // MR: Modified 2023/04/21
#define __NENOCSINOC_H__                                                                                                                       // MR: Modified 2023/04/21

#include <systemc.h>
#include "Tile.h"
#include "GlobalRoutingTable.h"
#include "GlobalTrafficTable.h"
#include "GlobalNestTrace.h"                                                                                                                   // MR: Added 2022/03/28
#include "Hub.h"
#include "Channel.h"
#include "TokenRing.h"

using namespace std;

template <typename T>
struct sc_signal_NSWE
{
    sc_signal<T> east;
    sc_signal<T> west;
    sc_signal<T> south;
    sc_signal<T> north;
};

template <typename T>
struct sc_signal_NSWEH
{
    sc_signal<T> east;
    sc_signal<T> west;
    sc_signal<T> south;
    sc_signal<T> north;
    sc_signal<T> to_hub;
    sc_signal<T> from_hub;
};


SC_MODULE(NoC)
{
    public: bool SwitchOnly; //true if the tile are switch only 
    // I/O Ports
    sc_in_clk clock;		// The input clock for the NoC
    sc_in < bool > reset;	// The reset signal for the NoC

    // Signals mesh and switch bloc in delta topologies
    sc_signal_NSWEH<bool> **req;
    sc_signal_NSWEH<bool> **ack;
    sc_signal_NSWEH<TBufferFullStatus> **buffer_full_status;
    sc_signal_NSWEH<Flit> **flit;
    sc_signal_NSWE<int> **free_slots;

    // NoP
    sc_signal_NSWE<NoP_data> **nop_data;

    //signals for connecting Core2Hub (just to test wireless in Butterfly)
    sc_signal<Flit> *flit_from_hub;
    sc_signal<Flit> *flit_to_hub;

    sc_signal<bool> *req_from_hub;
    sc_signal<bool> *req_to_hub;

    sc_signal<bool> *ack_from_hub;
    sc_signal<bool> *ack_to_hub;

    sc_signal<TBufferFullStatus> *buffer_full_status_from_hub;
    sc_signal<TBufferFullStatus> *buffer_full_status_to_hub;



    // Matrix of tiles
    Tile ***t;
    Tile ** core;

    map<int, Hub*> hub;
    map<int, Channel*> channel;

    TokenRing* token_ring;

    // Global tables
    GlobalRoutingTable grtable;
    GlobalTrafficTable gttable;
    GlobalNestTrace gnesttrace;                                                                                                                // MR: Added 2022/03/28


    // Constructor

    SC_CTOR(NoC) 
    {


	if (GlobalParams::topology == TOPOLOGY_MESH)
	    // Build the Mesh
	    buildMesh();
	else if (GlobalParams::topology == TOPOLOGY_TORUS)                                                                                     // MR: Added 2022/04/11
	    buildTorus();                                                                                                                      // MR: Added 2022/04/11
	else if (GlobalParams::topology == TOPOLOGY_BUTTERFLY)
        buildButterfly(); 
	else if (GlobalParams::topology == TOPOLOGY_BASELINE)
	    buildBaseline();
	else if (GlobalParams::topology == TOPOLOGY_OMEGA)
	    buildOmega();
	else {
	    cerr << "ERROR: Topology " << GlobalParams::topology << " is not yet supported." << endl;
	    exit(0);
    }
	GlobalParams::channel_selection = CHSEL_RANDOM;
	// out of yaml configuration (experimental features)
	//GlobalParams::channel_selection = CHSEL_FIRST_FREE;

	if (GlobalParams::ascii_monitor)
	{
	    SC_METHOD(asciiMonitor);
	    sensitive << clock.pos();
	}

    }

    // Support methods
    Tile *searchNode(const int id) const;

  private:

    void buildMesh();
    void buildTorus();                                                                                                                         // MR: Added 2022/04/11
    void buildButterfly();
    void buildBaseline();
    void buildOmega();
    void buildCommon();
    void asciiMonitor();
    int * hub_connected_ports;
};

//Hub * dd;

#endif
