/*
 * Noxim - the NoC Simulator
 *
 * (C) 2005-2018 by the University of Catania
 * For the complete list of authors refer to file ../doc/AUTHORS.txt
 * For the license applied to these sources refer to file ../doc/LICENSE.txt
 *
 * This file contains the definition of the global traffic table
 */
/*\\\********************************************************************************
 * Downloaded March 23, 2022 from
 * https://github.com/davidepatti/noxim/tree/c52ebce2217e57bcd4ff11a97b400323bd00acd5
 ************************************************************************************
 *
 * NENoCSi: Patched version of Noxim to process traffic generated by NEST
 * Modifications Copyright (C) 2022-2023 Forschungszentrum Juelich GmbH, ZEA-2
 * Author: Markus Robens <https://www.fz-juelich.de/profile/robens_m>
 * For the license applied to these modifications and NENoCSi as a whole
 * refer to file ../doc/LICENSE_NENOCSI.txt
 * 
 * GlobalNestTrace.h is partially based on GlobalTrafficTable.h.
 * The file has been created on March 27, 2022 and was modified on April 29, 2022.
 * There have been a couple of modifications and additions in order to populate 
 * and query node specific queues for traffic caused by NEST.
 * Some inspiration was taken from SpiNeMap as proposed in A. Balaji, F. Catthor, 
 * A. Das, Y. Wu, K. Huynh, F. G. Dell'Anna, G. Indiveri, J. L. Krichmar, N. D. Dutt, 
 * and S. Schaafsma, "Mapping Spiking Neural Networks to Neuromorphic Hardware," 
 * IEEE Transactions on Very Large Scale Integration (VLSI) Systems, Vol. 28, No. 1, 
 * January 2020, doi: 10.1109/TVLSI.2019.2951493.
 *
 *///********************************************************************************

#ifndef __NENOCSIGLOBALNESTTRACE_H__
#define __NENOCSIGLOBALNESTTRACE_H__

#include <queue>
#include <map>

struct NestTraceComm {
  int time;
  int src_nd;
  int dst_nd;
  int flt_tot;
  int flt_snt;
};

typedef std::queue< NestTraceComm > NestTrafficQueue;

class GlobalNestTrace {

 public:

  GlobalNestTrace();

  bool load(const std::string &fname);
  bool canShot(const int src_nd, const int now, int &t_pckt, int &dst_nd, int &flit_sz);
  bool occurrencesAsSource(const int src_nd);
  bool isValid();
  int getMaxNestBurst(const int scr_nd) const;                                            // MR: Added 2022/04/29
  int getMaxNestBurst() const;                                                            // MR: Added 2022/04/29
  double getAvgNestBurst(const int src_nd) const;                                         // MR: Added 2022/04/29
  double getAvgNestBurst() const;                                                         // MR: Added 2022/04/29

 private:
  int t_nest_to_cycle(const double t_nest);
  
  bool valid;
  std::map< int, NestTrafficQueue > NestTraffic;
  std::map< int, std::pair< double, int > > NestBurstStats;                               // MR: Added 2022/04/29
};

#endif /* __NENOCSIGLOBALNESTTRACE_H__ */
