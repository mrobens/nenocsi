/*
 * Noxim - the NoC Simulator
 *
 * (C) 2005-2018 by the University of Catania
 * For the complete list of authors refer to file ../../doc/AUTHORS.txt
 * For the license applied to these sources refer to file ../../doc/LICENSE.txt
 *
 */
/*\\\********************************************************************************
 * Downloaded March 23, 2022 from
 * https://github.com/davidepatti/noxim/tree/c52ebce2217e57bcd4ff11a97b400323bd00acd5
 ************************************************************************************
 *
 * McAERsim - NoC simulator with tree-based multicast support for AER packets
 * Modifications Copyright (C) 2022-2023 Forschungszentrum Juelich GmbH, ZEA-2
 * Author: Markus Robens <https://www.fz-juelich.de/profile/robens_m>
 * For the license applied to these modifications and McAERsim as a whole
 * refer to file ../../doc/LICENSE_MCAERSIM.txt
 * 
 * 2022-09-07: This file contains the declaration of the global neuron assignment
 *             table. This table is an auxiliary data structure that helps to
 *             configure the processing elements or more specifically their local
 *             event queues based on a file that is generated by the NEST
 *             microcircuit model. This file contains the neuron number limits for
 *             the single populations.
 *             Code segments required for the plug-in mechanism are in line with
 *             respective code segments in, e.g. Routing_XY.h of the Noxim release. 
 *             However, there are several additions. Especially, virtual prototype 
 *             methods of the abstract base class GlobalNeuronAssignmentTable are 
 *             overloaded in such a way that local event queues of the processing 
 *             elements are populated consistent with sequential neuron mapping. 
 *             (I.e., neuron populations are assigned sequentially to available 
 *             processing elements.)
 *
 *///******************************************************************************** 

#ifndef __MCAERSIMGLOBALNEURONASSIGNMENTTABLE_SEQ_H__
#define __MCAERSIMGLOBALNEURONASSIGNMENTTABLE_SEQ_H__

#include <vector>
#include <utility>
#include <string>
#include <fstream>
#include <cassert>
#include <iostream>
#include <cmath>

#include "GlobalParams.h"
#include "GlobalNeuronAssignmentTable.h"
#include "GlobalNeuronAssignmentTables.h"

// Neuron number limits for a specific population that is associated with a spike recorder file name
// Note:  Read-in for results from distributed NEST simulations is currently not supported
typedef std::pair<int, int> popLimits;

struct GlobalNeuronAssignmentTable_Seq: GlobalNeuronAssignmentTable
{
  // Constructor and Destructor
  GlobalNeuronAssignmentTable_Seq(){};
  ~GlobalNeuronAssignmentTable_Seq(){};
  // Methods
  bool load(const std::string& pe_conf_input_filename);
  bool load(const std::string& pop_limits_fname, const std::string& spk_rec_fname);
  bool getSpkRecFileParams(const int node_id, const int proc_id, std::string& spk_rec_fname, int& id_min, int& id_max);
  bool isValid() { return valid; };
  static GlobalNeuronAssignmentTable_Seq* getInstance();
 private:
  bool valid;
  std::vector<popLimits> gnassigntab;                 // Vetor index assigns a population number to it's population limits
  std::string spk_rec_fname_comps[3];                 // Used to split the spike recorder base file name.
                                                      // The actual file name is recombined from it according to
                                                      // the population limits as well as the number of neurons per node.
  static GlobalNeuronAssignmentTable_Seq* globalNeuronAssignmentTable_Seq;
  static GlobalNeuronAssignmentTablesRegister globalNeuronAssignmentTablesRegister;
};

#endif /* __MCAERSIMGLOBALNEURONASSIGNMENTTABLE_SEQ_H__ */
