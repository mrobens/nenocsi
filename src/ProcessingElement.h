/*
 * Noxim - the NoC Simulator
 *
 * (C) 2005-2018 by the University of Catania
 * For the complete list of authors refer to file ../doc/AUTHORS.txt
 * For the license applied to these sources refer to file ../doc/LICENSE.txt
 *
 * This file contains the declaration of the processing element
 */
/*\\\********************************************************************************
 * Downloaded March 23, 2022 from
 * https://github.com/davidepatti/noxim/tree/c52ebce2217e57bcd4ff11a97b400323bd00acd5
 ************************************************************************************
 *
 * McAERsim - NoC simulator with tree-based multicast support for AER packets
 * Modifications Copyright (C) 2022-2023 Forschungszentrum Juelich GmbH, ZEA-2
 * Author: Markus Robens <https://www.fz-juelich.de/profile/robens_m>
 * For the license applied to these modifications and McAERsim as a whole
 * refer to file ../doc/LICENSE_MCAERSIM.txt
 * 
 * 2022-09-08: McAERsim does not support different selection strategies, so that
 *             respective methods and attributes have been removed. It focuses on
 *             traffic generated by NEST, so that statistical traffic models and
 *             their support functions have not been implemented. Likewise, there
 *             is no need for a pointer to a global traffic table. It uses a
 *             different data type for transmissions that comes along with single
 *             flit packets only. Accordingly, it uses a local event queue rather
 *             than a packet_queue. Since multiple processing elements per tile
 *             are supported, it needs a tile ID in addition to the local ID.
 *             It does not use the attribute never_transmit. 
 *
 *///******************************************************************************** 

#ifndef __MCAERSIMPROCESSINGELEMENT_H__
#define __MCAERSIMPROCESSINGELEMENT_H__

#include <systemc.h>

#include "LocalEventQueue.h"
#include "DataStructs.h"
#include "Utils.h"

SC_MODULE(ProcessingElement)
{
  // I/O Ports
  sc_in_clk clock;                                // Input clock for the PE
  sc_in<bool> reset;                              // Reset signal for the PE

  sc_in<AER_EVT> evt_rx;                          // Input channel
  sc_in<bool> req_rx;                             // Request associated with the input channel
  sc_out<bool> ack_rx;                            // Outgoing acknowledge signal associated with the input channel
  sc_out<bool> buffer_full_status_rx;             // Outgoing buffer status indicator associated with the input channel

  sc_out<AER_EVT> evt_tx;                         // Output channel
  sc_out<bool> req_tx;                            // Request associated with the output channel
  sc_in<bool> ack_tx;                             // Incoming ack signal associated with the output channel
  sc_in<bool> buffer_full_status_tx;              // Incoming buffer status indicator associated with the output channel

  // Registers
  int tile_id;                                    // Needed to compute the global ID of this processing element
  int local_id;                                   // Unique identification number
  //bool never_transmit;                            // True if PE does not transmit any events
  bool current_level_rx;                          // Current level for Alternating Bit Protocol (ABP)
  bool current_level_tx;                          // Current level for Alternating Bit Protocol (ABP)
  LocalEventQ l_evt_q;                            // Local queue of AER events
  long queuedAEREvts;                             // Holds the number of queued AER events

  // Functions
  void rxProcess();                               // Receiving process
  void txProcess();                               // Transmitting process
  bool canShot();                                 // True, if AER_EVT at the head of the local AER queue should be launched
  long getQueuedAEREvts() const;                  // Returns the number of queued AER events

  // Constructor
  SC_CTOR(ProcessingElement)
  {
    SC_METHOD(rxProcess);
    sensitive << reset;
    sensitive << clock.pos();

    SC_METHOD(txProcess);
    sensitive << reset;
    sensitive << clock.pos();

    queuedAEREvts = 0;
  }
};

#endif /* __MCAERSIMPROCESSINGELEMENT_H__ */
