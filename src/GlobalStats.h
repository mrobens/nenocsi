/*
 * Noxim - the NoC Simulator
 *
 * (C) 2005-2018 by the University of Catania
 * For the complete list of authors refer to file ../doc/AUTHORS.txt
 * For the license applied to these sources refer to file ../doc/LICENSE.txt
 *
 * This file contains the declaration of the global statistics
 */
/*\\\********************************************************************************
 * Downloaded March 23, 2022 from
 * https://github.com/davidepatti/noxim/tree/c52ebce2217e57bcd4ff11a97b400323bd00acd5
 ************************************************************************************
 *
 * NENoCSi: Patched version of Noxim to process traffic generated by NEST
 * Modifications Copyright (C) 2022-2023 Forschungszentrum Juelich GmbH, ZEA-2
 * Author: Markus Robens <https://www.fz-juelich.de/profile/robens_m>
 * For the license applied to these modifications and NENoCSi as a whole
 * refer to file ../doc/LICENSE_NENOCSI.txt
 * 
 * In this patched version, three functions are added to this file. They 
 * collect all latencies in a vector, determine the number of flits scheduled 
 * and provide for the export of the latency vector as well as the matrix of
 * routed flits. In addition, the vector containing the latencies is declared.
 *
 * Modifications are highlighted by comments consisting of initials and date.
 *
 *///******************************************************************************** 

#ifndef __NENOCSIGLOBALSTATS_H__                                                                                                               // MR: Modified 2023/04/21
#define __NENOCSIGLOBALSTATS_H__                                                                                                               // MR: Modified 2023/04/21

#include <iostream>
#include <vector>
#include <iomanip>
#include <boost/filesystem.hpp>                                                                                                                // MR: Added 2022/04/04
#include "NoC.h"
#include "Tile.h"
using namespace std;

class GlobalStats {

  public:

    GlobalStats(const NoC * _noc);

    // Returns the aggregated average delay (cycles)
    double getAverageDelay();

    // Returns the aggragated average delay (cycles) for communication src_id->dst_id
    double getAverageDelay(const int src_id, const int dst_id);

    // Returns the max delay
    double getMaxDelay();

    // Returns the max delay (cycles) experimented by destination
    // node_id. Returns -1 if node_id is not destination of any
    // communication
    double getMaxDelay(const int node_id);

    // Returns the max delay (cycles) for communication src_id->dst_id
    double getMaxDelay(const int src_id, const int dst_id);

    // Returns tha matrix of max delay for any node of the network
     vector < vector < double > > getMaxDelayMtx();

    // Saves the delays experienced w.r.t. all nodes in the network                                                                            // MR: Added 2022/04/04
    // in the private vector of doubles overall_delays                                                                                         // MR: Added 2022/04/04
    void setOverallDelays(vector<double>& ovl_delays) const;                                                                                   // MR: Added 2022/04/04

    // Returns the overall number of queued flits                                                                                              // MR: Added 2022/04/08
    long getOverallQueuedFlits() const;                                                                                                        // MR: Added 2022/04/08

    // Returns the aggregated average throughput (flits/cycles)
    double getAggregatedThroughput();

    // Returns the average throughput per IP (flit/cycles/IP)
    double getThroughput();

    // Returns the average throughput considering only a active IP (flit/cycles/IP)
    double getActiveThroughput();

    // Returns the aggregated average throughput (flits/cycles) for
    // communication src_id->dst_id
    double getAverageThroughput(const int src_id, const int dst_id);

    // Returns the total number of received packets
    unsigned int getReceivedPackets();

    // Returns the total number of received flits
    unsigned int getReceivedFlits();

    // number of packets that used the wireless network
    unsigned int getWirelessPackets();


    // Returns the number of routed flits for each router
     vector < vector < unsigned long > > getRoutedFlitsMtx();

    // Returns the total dyamic power
    double getDynamicPower();
    // Returns the total static power
    double getStaticPower();

    // Returns the total power
    double getTotalPower() { return getDynamicPower()+getStaticPower(); }

    // Shows global statistics
    void showStats(std::ostream & out = std::cout, bool detailed = false);

    void showBufferStats(std::ostream & out);


    void showPowerBreakDown(std::ostream & out);

    void showPowerManagerStats(std::ostream & out);

    double getReceivedIdealFlitRatio();

    // Exports selected statistics data, e.g. for Gnuplot processing                                                                           // MR: Added 2022/04/04
    bool exportStatData(void);                                                                                                                 // MR: Added 2022/04/04

#ifdef TESTING
    unsigned int drained_total;
#endif

  private:
    const NoC *noc;
    vector<double> overall_delays;                                                                                                             // MR: Added 2022/04/04
    void updatePowerBreakDown(map<string,double> &dst,PowerBreakdown* src);
};

#endif
