#!/usr/bin/env python3
#------------------------------------------------------------------------
#
# NENoCSi-Framework: Network traffic within NENoCSi generated by NEST
# Copyright (C) 2024 Forschungszentrum Juelich GmbH, ZEA-2
# Author: Markus Robens <https://www.fz-juelich.de/profile/robens_m>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#------------------------------------------------------------------------
#
# This Python script generates histogram data on routing paths lengths
# for the casting type and topology passed as parameter based on the
# YAML files used for data exchange within the NENoCSi framework.
# Examples are contained in the NoC-Sim-Input subfolder of the dataset
# available at https://doi.org/10.5281/zenodo.10159252.
#
# The script needs to receive five parameters: the path to the YAML files
# within the dataset used for data exchange and generated by NEST, the
# casting type, the topology, the size of the network in x direction, and
# the size of the network in y direction.
#
#------------------------------------------------------------------------
import sys
import os
import numpy as np
import yaml
from collections import defaultdict

max_packet_size = 16

if (len(sys.argv) != 6):
    print("""Usage: ./RoutingPathsNENoCSi <path> <cast> <topo> <dimx> <dimy>
where <path> is the path to the YAML files generated by NEST,
      <cast> is the casting type used for routing (UC, LMC, LMC_SRC),
      <topo> is the topology (mesh or torus),
      <dimx> is the size of the network in x direction,
      <dimy> is the size of the network in y direction.""")
    sys.exit(0)
else:
    pname = sys.argv[1]
    ctype = sys.argv[2]
    topo = sys.argv[3]
    dimx = sys.argv[4]
    dimy = sys.argv[5]
    if (not pname.startswith('/')):
        print('Please provide an absolute path to the YAML files generated by NEST as first argument.')
        sys.exit(0)
    if (not ((ctype.upper() == 'UC') or (ctype.upper() == 'LMC') or (ctype.upper() == 'LMC_SRC'))):
        print('Please select a proper casting type as second argument: UC, LMC, LMC_SRC.')
        sys.exit(0)
    if (not (topo.isalpha() and ((topo.lower() == 'mesh') or (topo.lower() == 'torus')))):
        print('Please select a proper topology as third argument: mesh or torus.')
        sys.exit(0)
    if (not str.isdigit(dimx)):
        print('The fourth argument <dimx> needs to be an integer number.')
        sys.exit(0)
    if (not str.isdigit(dimy)):
        print('The fifth argument <dimy> needs to be an integer number.')
        sys.exit(0)
    ctype = ctype.upper()
    topo = topo.lower()
    dimx = int(dimx)
    dimy = int(dimy)

if (ctype == 'LMC_SRC'):
    fyaml = os.path.join(pname, 'Nest_MicroCirc_SpkTimes_NpN_256_LMC_SRC.yaml')
else:
    fyaml = os.path.join(pname, 'Nest_MicroCirc_SpkTimes_NpN_256.yaml')
with open(fyaml, 'rt') as fi:
    yf = yaml.safe_load(fi)

lhisto = defaultdict(int)
for sender in yf:
    sx = sender % dimx
    sy = sender // dimx
    for li in yf[sender]:
        for (receiver, flits) in list(li.values())[0].items():
            rx = receiver % dimx
            ry = receiver // dimx
            if (ctype == 'UC'):
                npacket = flits
            else:
                npacket = int(np.ceil( flits / max_packet_size))

            if (topo == 'mesh'):
                dist = abs( rx - sx ) + abs( ry - sy )
            else: #Torus
                dist = min( abs( rx - sx ), dimx - abs( rx - sx )) + \
                       min( abs( ry - sy ), dimy - abs( ry - sy))

            lhisto[ dist ] += npacket

lrange = range(0, int(max(lhisto.keys())) + 1)

with open('LinkLengthHisto' + topo[0].upper() + topo[1:] + ctype + '.csv', 'wt') as fo:
    fo.write('# Routing paths lengths for the ' + ctype + ' case in a ' + topo + '\n')
    for l in lrange:
        if l in lhisto:
            fo.write('{:d} {:d}\n'.format(l, lhisto[l]))
        else:
            fo.write('{:d} {:d}\n'.format(l, 0))
